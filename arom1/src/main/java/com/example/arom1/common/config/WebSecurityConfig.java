package com.example.arom1.common.config;import com.example.arom1.common.filter.JwtAuthenticationFilter;import com.example.arom1.common.util.jwt.TokenProvider;//import com.example.arom1.service.OAuth2Service;import lombok.RequiredArgsConstructor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@EnableWebSecurity@Configuration@RequiredArgsConstructorpublic class WebSecurityConfig {    private final AuthenticationConfiguration configuration;    private final TokenProvider tokenProvider;//    private final OAuth2Service oAuth2Service;    @Bean    public PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    // 1. 스프링 시큐리티 기능 비활성화    //@Bean    //public WebSecurityCustomizer configure() {    //    return (web) -> web.ignoring()    //            .requestMatchers(toH2Console()) // H2사용 x -> 수정 필요    //            .requestMatchers(new AntPathRequestMatcher("/static/**"));    //}    // 2, 특정 HTTP 요청에 대한 웹 기반 보안 구성    @Bean    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {        return http                .authorizeHttpRequests(auth -> auth                        .requestMatchers("/login", "/signup", "/login/refresh", "/stomp/chat").permitAll()                        .anyRequest().authenticated())                .formLogin(AbstractHttpConfigurer::disable)                //폼로그인 사용 X -> 폼로그인은 세션 방식에 적합//                .formLogin(formLogin -> formLogin//                        .loginPage("/login")//                        .permitAll()//                        .loginProcessingUrl("/login_proc")//                        .defaultSuccessUrl("/home")//                )//                .logout(logout -> logout//                        .logoutSuccessUrl("/login")//                        .invalidateHttpSession(true)//                )                //필터 추가 (위치 중요)                //로그인 필터 -> 로그인 서비스 메서드 변경 (이유: 예외 처리 수월 등)                //.addFilterAt(new JwtLoginFilter(authenticationManager(configuration), tokenProvider), UsernamePasswordAuthenticationFilter.class)                .addFilterBefore(new JwtAuthenticationFilter(tokenProvider), UsernamePasswordAuthenticationFilter.class)                //csrf 설정                .csrf(AbstractHttpConfigurer::disable)                .sessionManagement((session) -> session                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))//                .oauth2Login(oauth -> // OAuth2 로그인 기능에 대한 여러 설정의 진입점//                        // OAuth2 로그인 성공 이후 사용자 정보를 가져올 때의 설정을 담당//                        oauth.userInfoEndpoint(c -> c.userService(oAuth2Service)))                .build();    }    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {        return configuration.getAuthenticationManager();    }}